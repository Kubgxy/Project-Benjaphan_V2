"use client";

import { useEffect, useState, useRef } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import { createOrder } from "@/actions/order-actions";
import { formatPrice } from "@/lib/utils";
import {
  ShoppingCart,
  MapPinHouse,
  Package,
  Banknote,
  X,
  QrCode,
} from "lucide-react";
import { toast } from "@/components/ui/use-toast";
import { getBaseUrl } from "@/lib/api";

export function CheckoutForm() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [checkoutItems, setCheckoutItems] = useState<any[]>([]);
  const [subtotal, setSubtotal] = useState(0);
  const [shipping, setShipping] = useState(50);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);
  const modalRef = useRef<HTMLDialogElement>(null);
  const [addressList, setAddressList] = useState<any[]>([]);
  const [selectedAddressId, setSelectedAddressId] = useState<string | null>(
    null
  );

  const [slipFile, setSlipFile] = useState<File | null>(null);
  const [paymentMethod, setPaymentMethod] = useState<"online" | "qr">("online");
  // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ field ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á backend 100%
  const [shippingInfo, setShippingInfo] = useState({
    Name: "",
    label: "",
    addressLine: "",
    city: "",
    province: "",
    postalCode: "",
    country: "Thailand",
    phone: "",
  });

  // ‡πÇ‡∏´‡∏•‡∏î checkout summary
  useEffect(() => {
    axios
      .get(`${getBaseUrl()}/api/order/checkoutSummary`, {
        withCredentials: true,
      })
      .then((res) => {
        setCheckoutItems(res.data.items);
        setSubtotal(res.data.subtotal);
        setShipping(res.data.shipping);
        setTotal(res.data.total);
      })
      .catch((err) => {
        console.error("‚ùå Failed to load checkout summary:", err);
        router.push("/cart");
      })
      .finally(() => setLoading(false));
  }, [router]);

  // ‡πÇ‡∏´‡∏•‡∏î address list
  useEffect(() => {
    axios
      .get(`${getBaseUrl()}/api/user/getAddress`, {
        withCredentials: true,
      })
      .then((res) => {
        setAddressList(res.data.addresses || []);
        if (res.data.addresses.length > 0) {
          const defaultAddr = res.data.addresses[0];
          setSelectedAddressId(defaultAddr._id);
          setShippingInfo({
            Name: defaultAddr.Name,
            label: defaultAddr.label,
            addressLine: defaultAddr.addressLine,
            city: defaultAddr.city,
            province: defaultAddr.province,
            postalCode: defaultAddr.postalCode,
            country: defaultAddr.country,
            phone: defaultAddr.phone,
          });
        }
      })
      .catch((error: any) => {
        if (error.response?.status === 401) {
          return;
        }
        console.error("‚ùå Failed to load addresses:", error);
      });
  }, []);

  const handleSaveShipping = () => {
    if (selectedAddressId) {
      axios
        .patch(
          `${getBaseUrl()}/api/user/updateAddress/${selectedAddressId}`,
          {
            Name: shippingInfo.Name,
            label: shippingInfo.label,
            addressLine: shippingInfo.addressLine,
            city: shippingInfo.city,
            province: shippingInfo.province,
            postalCode: shippingInfo.postalCode,
            country: shippingInfo.country,
            phone: shippingInfo.phone,
          },
          { withCredentials: true }
        )
        .then(() => {
          toast({
            title: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            duration: 3000,
          });
          window.location.reload();
        })
        .catch(() =>
          toast({
            title: "‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
            description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
            duration: 3000,
          })
        );
    } else {
      axios
        .post(
          `${getBaseUrl()}/api/user/addAddress`,
          {
            Name: shippingInfo.Name,
            label: shippingInfo.label,
            addressLine: shippingInfo.addressLine,
            city: shippingInfo.city,
            province: shippingInfo.province,
            postalCode: shippingInfo.postalCode,
            country: shippingInfo.country,
            phone: shippingInfo.phone,
          },
          { withCredentials: true }
        )
        .then(() => {
          toast({
            title: "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
            duration: 3000,
          });
          window.location.reload();
        })
        .catch(() => alert("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"));
    }
    modalRef.current?.close();
  };

  // const handlePlaceOrder = async () => {
  //   setIsSubmitting(true);
  //   setError(null);

  //   try {
  //     const formattedItems = checkoutItems.map((item) => ({
  //       productId: item.productId || item._id || item.id_product,
  //       name: item.name,
  //       size: item.size,
  //       quantity: item.quantity,
  //       priceAtPurchase: item.priceAtAdded, // mapping ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
  //       images: item.images || [],
  //     }));

  //     const orderData = {
  //       items: formattedItems,
  //       subtotal,
  //       shipping,
  //       total,
  //       shippingInfo: {
  //         Name: shippingInfo.Name, // ‚úÖ
  //         label: shippingInfo.label,
  //         addressLine: shippingInfo.addressLine, // ‚úÖ
  //         city: shippingInfo.city,
  //         province: shippingInfo.province, // ‚úÖ
  //         postalCode: shippingInfo.postalCode, // ‚úÖ
  //         country: shippingInfo.country,
  //         phone: shippingInfo.phone,
  //       },
  //       paymentMethod,
  //     };

  //     const result = await createOrder(orderData);

  //     if (result.success) {
  //       router.push(`/payment?orderId=${result.orderId}`);
  //     } else {
  //       setError(result.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
  //       setIsSubmitting(false);
  //     }
  //   } catch (err) {
  //     console.error("Error placing order:", err);
  //     setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
  //     setIsSubmitting(false);
  //   }
  // };

  const handleConfirmPayment = async () => {
    if (paymentMethod === "online" && !slipFile) {
      toast({
        title: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        duration: 3000,
      });
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      const formattedItems = checkoutItems.map((item) => ({
        productId: item.productId || item._id || item.id_product,
        name: item.name,
        size: item.size,
        quantity: item.quantity,
        priceAtPurchase: item.priceAtAdded,
        images: item.images || [],
      }));

      // üëâ 1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡∏Å‡πà‡∏≠‡∏ô
      const orderRes = await createOrder({
        items: formattedItems,
        subtotal,
        shipping,
        total,
        shippingInfo: {
          Name: shippingInfo.Name,
          label: shippingInfo.label,
          addressLine: shippingInfo.addressLine,
          city: shippingInfo.city,
          province: shippingInfo.province,
          postalCode: shippingInfo.postalCode,
          country: shippingInfo.country,
          phone: shippingInfo.phone,
        },
        paymentMethod,
      });

      if (!orderRes.success) {
        toast({
          title: "‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: orderRes.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
        });
        setIsSubmitting(false);
        return;
      }

      const orderId = orderRes.orderId;

      // üëâ 2Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
      if (paymentMethod === "online" && slipFile) {
        const formData = new FormData();
        formData.append("slip", slipFile);

        await axios.post(
          `${getBaseUrl()}/api/order/uploadSlip/${orderId}`,
          formData,
          {
            withCredentials: true,
            headers: { "Content-Type": "multipart/form-data" },
          }
        );
      }

      toast({
        title: "‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡πç‡∏≤‡πÄ‡∏£‡πá‡∏à!",
        description: "‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡πç‡∏≤‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        duration: 3000,
      });

      router.push(`/order-confirmation?orderId=${orderId}`);
    } catch (err) {
      console.error("Error confirming payment:", err);
      toast({
        title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
      });
      setIsSubmitting(false);
    }
  };

  if (loading) {
    return <div className="text-center py-12">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
  }

  if (checkoutItems.length === 0) {
    return <div className="text-center py-12">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</div>;
  }

  return (
    <div className="container mx-auto p-4 max-w-6xl">
      <h1 className="flex items-center gap-2 text-3xl font-display font-medium text-brown-800 mb-8">
        <ShoppingCart className="w-8 h-8 text-yellow-500" />
        ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
      </h1>

      {/* MODAL ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
      <dialog
        ref={modalRef}
        className="rounded-lg p-6 w-full max-w-3xl z-50 bg-white shadow-lg"
      >
        <button
          className="absolute top-5 right-5 text-gray-500 hover:text-red-500"
          onClick={() => modalRef.current?.close()}
        >
          <X className="w-6 h-6" />
        </button>
        <h2 className="flex gap-2 text-lg font-semibold mb-4 text-brown-800">
          <MapPinHouse className="w-6 h-6 text-yellow-500" />
          {selectedAddressId ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà"}
        </h2>

        <div className="space-y-3">
          <input
            type="text"
            placeholder="‡∏ä‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"
            value={shippingInfo.Name}
            onChange={(e) =>
              setShippingInfo({ ...shippingInfo, Name: e.target.value })
            }
            className="w-full border rounded px-3 py-2"
          />
          <input
            type="tel"
            placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠"
            inputMode="numeric"
            pattern="[0-9]*"
            maxLength={10}
            value={shippingInfo.phone}
            onChange={(e) => {
              const onlyNumbers = e.target.value
                .replace(/\D/g, "")
                .slice(0, 10);
              setShippingInfo({ ...shippingInfo, phone: onlyNumbers });
            }}
            className="w-full border rounded px-3 py-2"
          />

          <input
            type="text"
            placeholder="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏ö‡πâ‡∏≤‡∏ô / ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô "
            value={shippingInfo.label}
            onChange={(e) =>
              setShippingInfo({ ...shippingInfo, label: e.target.value })
            }
            className="w-full border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà"
            value={shippingInfo.addressLine}
            onChange={(e) =>
              setShippingInfo({ ...shippingInfo, addressLine: e.target.value })
            }
            className="w-full border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="‡πÄ‡∏Ç‡∏ï/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
            value={shippingInfo.city}
            onChange={(e) =>
              setShippingInfo({ ...shippingInfo, city: e.target.value })
            }
            className="w-full border rounded px-3 py-2"
          />
          <input
            type="text"
            placeholder="‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"
            value={shippingInfo.province}
            onChange={(e) =>
              setShippingInfo({ ...shippingInfo, province: e.target.value })
            }
            className="w-full border rounded px-3 py-2"
          />
          <input
            type="number"
            placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
            value={shippingInfo.postalCode}
            onChange={(e) =>
              setShippingInfo({ ...shippingInfo, postalCode: e.target.value })
            }
            className="w-full border rounded px-3 py-2"
          />
        </div>

        <button
          onClick={handleSaveShipping}
          className="mt-4 w-full bg-yellow-500 hover:bg-yellow-600 text-white py-2 rounded"
        >
          ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        </button>
      </dialog>

      {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
      <div className="bg-white p-4 rounded shadow mb-4">
        <div className="flex justify-between items-center mb-2">
          <h2 className="flex gap-2 text-lg font-semibold text-brown-800 items-center">
            <MapPinHouse className="w-6 h-6 text-yellow-500" />
            ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
          </h2>
          <button
            className="bg-yellow-500 hover:bg-yellow-600 text-white text-sm px-4 py-2 rounded"
            onClick={() => {
              setSelectedAddressId(null);
              setShippingInfo({
                Name: "",
                label: "",
                addressLine: "",
                city: "",
                province: "",
                postalCode: "",
                country: "Thailand",
                phone: "",
              });
              modalRef.current?.showModal();
            }}
          >
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
          </button>
        </div>

        {addressList.length > 0 ? (
          <>
            <select
              value={selectedAddressId || ""}
              onChange={(e) => {
                const addr = addressList.find((a) => a._id === e.target.value);
                if (addr) {
                  setSelectedAddressId(addr._id);
                  setShippingInfo({
                    Name: addr.Name,
                    label: addr.label,
                    addressLine: addr.addressLine,
                    city: addr.city,
                    province: addr.province,
                    postalCode: addr.postalCode,
                    country: addr.country,
                    phone: addr.phone,
                  });
                }
              }}
              className="w-full border rounded px-3 py-2 mb-2"
            >
              {addressList.map((addr) => (
                <option key={addr._id} value={addr._id}>
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö : {addr.Name} ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà : {addr.addressLine} ,{" "}
                  {addr.city} , {addr.province} {addr.postalCode}
                </option>
              ))}
            </select>
            <button
              className="bg-yellow-500 hover:bg-yellow-600 text-white text-sm px-4 py-2 rounded"
              onClick={() => modalRef.current?.showModal()}
            >
              ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ
            </button>
          </>
        ) : (
          <p className="text-red-500 text-sm">
            ‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
          </p>
        )}
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
      <div className="bg-white p-4 rounded shadow mb-4">
        <h2 className="flex items-center gap-2 text-lg font-semibold mb-2 text-brown-800">
          <Package className="w-5 h-5 text-yellow-500" />
          ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß
        </h2>
        {checkoutItems.map((item, index) => (
          <div
            key={item._id?.toString() || item.id_product || index}
            className="flex items-center justify-between py-2 border-b"
          >
            <div className="flex items-center">
              <Image
                src={
                  item.images?.[0]
                    ? `${getBaseUrl()}${item.images[0]}`
                    : "/placeholder.svg"
                }
                alt={item.name}
                width={24}
                height={24}
                className="object-cover mr-4 w-[80px] h-[80px]"
                priority
              />
              <div>
                <p className="font-medium text-brown-800">{item.name}</p>
                <p className="text-sm text-gray-500">
                  ‡∏Ç‡∏ô‡∏≤‡∏î: {item.size} | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item.quantity}
                </p>
              </div>
            </div>
            <p className="font-medium">
              {formatPrice(item.priceAtAdded * item.quantity)}
            </p>
          </div>
        ))}
      </div>

      {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
      <div className="bg-white p-4 rounded shadow mb-4">
        <div className="flex justify-between mb-2">
          <span className="text-brown-800">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</span>
          <span>{formatPrice(subtotal)}</span>
        </div>
        <div className="flex justify-between mb-2">
          <span className="text-brown-800">‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
          <span>{formatPrice(shipping)}</span>
        </div>
        <div className="flex justify-between items-center font-bold text-lg border-t pt-2">
          <div className="flex items-center gap-2 text-brown-800">
            <Banknote className="w-6 h-6 text-yellow-500" />
            ‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </div>
          <span className="text-red-500">{formatPrice(total)}</span>
        </div>
      </div>
      {/* ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
      <div className="bg-white p-4 rounded shadow mb-4">
        <h2 className="text-lg font-semibold text-brown-800 mb-4 flex items-center gap-2">
          <QrCode className="w-5 h-5 text-yellow-500" />
          ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        </h2>

        <div className="flex gap-4 mb-4">
          <button
            className={`flex-1 px-4 py-2 rounded-lg transition ${
              paymentMethod === "online"
                ? "bg-yellow-500 text-white shadow"
                : "bg-gray-100 text-gray-700 hover:bg-gray-200"
            }`}
            onClick={() => setPaymentMethod("online")}
          >
            ‡πÇ‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
          </button>
          <button
            className={`flex-1 px-4 py-2 rounded-lg transition ${
              paymentMethod === "qr"
                ? "bg-yellow-500 text-white shadow"
                : "bg-gray-100 text-gray-700 hover:bg-gray-200"
            }`}
            onClick={() => setPaymentMethod("qr")}
          >
            ‡∏™‡πÅ‡∏Å‡∏ô QR Code
          </button>
        </div>

        {paymentMethod === "online" ? (
          <div className="space-y-3 text-sm text-gray-700">
            <div>
              <p className="font-medium">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå</p>
              <p>
                ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: <span className="font-medium">123-456-7890</span>
              </p>
              <p>
                ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:{" "}
                <span className="font-medium">‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ö‡∏ç‡∏à‡∏†‡∏±‡∏ì‡∏ë‡πå‡πï ‡∏à‡∏≥‡∏Å‡∏±‡∏î</span>
              </p>
              <p className="text-gray-500 text-xs">
                ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î ‚Äú‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‚Äù
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
              </label>
              <input
                type="file"
                accept="image/*"
                onChange={(e) => {
                  if (e.target.files && e.target.files.length > 0) {
                    setSlipFile(e.target.files[0]);
                  }
                }}
                className="block w-full text-sm text-gray-700 border border-gray-300 rounded-lg cursor-pointer focus:outline-none"
              />
            </div>
          </div>
        ) : (
          <div className="space-y-2 text-center">
            <Image
              src="/qrcode-sample.png"
              alt="QR Code"
              width={160}
              height={160}
              className="mx-auto"
            />
            <p className="text-gray-500 text-xs">
              ‡∏´‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î ‚Äú‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‚Äù
            </p>
          </div>
        )}
      </div>
      <div className="flex gap-4">
        <Button
          onClick={() => router.push("/cart")}
          className="w-full bg-gray-300 hover:bg-gray-400 text-gray-800 py-3 rounded text-lg font-semibold"
          disabled={isSubmitting}
        >
          ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        </Button>
        <Button
          onClick={handleConfirmPayment}
          className="w-full bg-yellow-500 hover:bg-yellow-600 text-white py-3 rounded text-lg font-semibold"
          disabled={isSubmitting || !selectedAddressId}
        >
          {isSubmitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"}
        </Button>
      </div>
    </div>
  );
}
