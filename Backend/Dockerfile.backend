# ========================
# Build dependencies stage
# ========================
FROM node:20-alpine AS deps
WORKDIR /app

# ติดตั้ง build tools (สำหรับ bcrypt, node-gyp ฯลฯ)
RUN apk add --no-cache python3 make g++ && \
    corepack enable && corepack prepare yarn@4.5.2 --activate

COPY package.json yarn.lock .yarnrc.yml ./
RUN yarn install --frozen-lockfile
RUN test -d node_modules || { echo "node_modules not created"; exit 1; }

# ========================
# Build stage
# ========================
FROM node:20-alpine AS builder
WORKDIR /app

RUN apk add --no-cache python3 make g++ && \
    corepack enable && corepack prepare yarn@4.5.2 --activate

COPY --from=deps /app/node_modules ./node_modules

# ✅ Copy รูปตั้งต้นไปไว้ที่ uploads-backup (เพื่อให้ไม่โดน volume ทับ)
COPY ./uploads /app/uploads-backup

# ✅ Copy source code ทั้งหมด
COPY . .

# ✅ Build source
RUN yarn build

# ========================
# Production Image
# ========================
FROM node:20-alpine
WORKDIR /app

RUN apk add --no-cache python3 make g++ && \
    corepack enable && corepack prepare yarn@4.5.2 --activate

# ✅ Copy ผลลัพธ์จาก builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/yarn.lock ./yarn.lock
COPY --from=builder /app/.yarnrc.yml ./.yarnrc.yml
COPY --from=builder /app/uploads-backup ./uploads-backup

# ✅ Install production dependencies
RUN yarn install --frozen-lockfile

# ✅ เปิด port
EXPOSE 3000

# ✅ Run backend
CMD ["yarn", "start"]
