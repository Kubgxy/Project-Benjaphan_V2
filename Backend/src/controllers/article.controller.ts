import { Request, Response } from "express";
// import Article from "../Models/Article";
import Article from "../Models_GPT/Article"; // Model
import slugify from "slugify";


// üü¢ ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ published)
export const getAllArticles = async (req: Request, res: Response) => {
  try {
    const { search, tag, category, page = 1, limit = 10, sortBy = "createdAt" } = req.query;

    const query: any = {}; // üü¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ isPublished ‡πÅ‡∏•‡πâ‡∏ß

    if (search) {
      query.title = { $regex: search, $options: "i" }; // üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ title (case-insensitive)
    }

    if (tag) {
      query.tags = tag; // üîñ filter ‡∏à‡∏≤‡∏Å tag
    }

    if (category) {
      query.category = category; // üóÇÔ∏è filter ‡∏à‡∏≤‡∏Å category
    }

    // üü° ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ sort
    let sortOptions: any = {};
    if (sortBy === "views") {
      sortOptions = { views: -1 }; // üî• ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° views ‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢
    } else {
      sortOptions = { createdAt: -1 }; // üïí default ‚Üí ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
    }

    const articles = await Article.find(query)
      .populate("author", "firstName lastName")
      .sort(sortOptions)
      .skip((Number(page) - 1) * Number(limit))
      .limit(Number(limit));

    const total = await Article.countDocuments(query);

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      sortBy,
      articles,
    });
  } catch (error) {
    console.error("‚ùå Error fetching articles:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
  }
};

// üü† ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ slug
export const getArticleBySlug = async (req: Request, res: Response) => {
    try {
      const rawSlug = req.params.slug;
      const decodedSlug = decodeURIComponent(rawSlug);

      const article = await Article.findOne({ slug: decodedSlug, isPublished: true })
      .populate("author", "firstName lastName");
  
      if (!article) {
        res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ" });
        return
      }
      res.status(200).json({ article });
    } catch (error) {
      console.error("‚ùå Error fetching article by slug:", error);
      res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
    }
  };

export const increaseViewBySlug = async (req: Request, res: Response) => {
  try {
    const { slug } = req.params;
    const decodedSlug = decodeURIComponent(slug);

    const article = await Article.findOne({ slug: decodedSlug });
    if (!article) {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°" });
      return;
    }

    article.views += 1;
    await article.save();

    res.status(200).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏° view ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (error) {
    console.error("‚ùå Error increasing view:", error);
    res.status(500).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏° view ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", error });
  }
};
  
// üü¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
export const createArticle = async (req: Request, res: Response) => {
  try {
    const {
      title,
      excerpt,
      content,
      tags,
      category,
      metaDescription,
      isPublished,
    } = req.body;

    const authorId = req.user?.userId;

    const files = req.files as { [fieldname: string]: Express.Multer.File[] };

    const thumbnail = files?.["thumbnail"]?.[0]?.path || "";
    const contentImages = (files?.["contentImages"] || []).map((file) => file.path);

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á title ‡πÄ‡∏õ‡πá‡∏ô slug
    const slug = slugify(title, {
      lower: true,
      strict: true,
      locale: "th",
    });

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á tags ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array
    let parsedTags: string[] = [];
    if (typeof tags === "string") {
      try {
        parsedTags = JSON.parse(tags);
      } catch {
        parsedTags = tags.split(",").map((tag: string) => tag.trim()).filter((tag) => tag !== "");
      }
    } else if (Array.isArray(tags)) {
      parsedTags = tags;
    }

    const newArticle = new Article({
      title,
      slug, // ‚úÖ ‡πÉ‡∏™‡πà slug ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
      excerpt,
      content,
      thumbnail,
      contentImages,
      tags: parsedTags,
      category,
      metaDescription,
      isPublished: isPublished === "true",
      author: authorId,
    });

    await newArticle.save();

    res.status(201).json({
      message: "üìñ ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      article: newArticle,
    });
  } catch (error) {
    console.error("‚ùå Error creating article:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
  }
};

// üü† ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
export const updateArticle = async (req: Request, res: Response) => {
  try {
    const articleId = req.params.id;
    const {
      title,
      excerpt,
      content,
      tags,
      category,
      metaDescription,
      isPublished,
    } = req.body;

    const files = req.files as { [fieldname: string]: Express.Multer.File[] };

    const thumbnail = files?.["thumbnail"]?.[0]?.path; // optional
    const contentImages = (files?.["contentImages"] || []).map((f) => f.path);

    // ‚úÖ Parse tags ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô create
    let parsedTags: string[] = [];
    if (typeof tags === "string") {
      try {
        parsedTags = JSON.parse(tags);
      } catch {
        parsedTags = tags.split(",").map((t: string) => t.trim()).filter((t) => t !== "");
      }
    } else if (Array.isArray(tags)) {
      parsedTags = tags;
    }

    // ‚úÖ Convert isPublished to boolean
    const published = isPublished === "true" || isPublished === true;

    // ‚úÖ Build update object dynamically
    const updateFields: any = {
      title,
      excerpt,
      content,
      category,
      tags: parsedTags,
      metaDescription,
      isPublished: published,
    };

    if (thumbnail) updateFields.thumbnail = thumbnail;
    if (contentImages.length > 0) updateFields.contentImages = contentImages;

    const updatedArticle = await Article.findByIdAndUpdate(
      articleId,
      updateFields,
      { new: true, runValidators: true }
    );

    if (!updatedArticle) {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ" });
      return;
    }

    res.status(200).json({
      message: "üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      article: updatedArticle,
    });
  } catch (error) {
    console.error("‚ùå Error updating article:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
  }
};

// üü† ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
export const deleteArticle = async (req: Request, res: Response) => {
    try {
      const articleId = req.params.id;
  
      const deletedArticle = await Article.findByIdAndDelete(articleId);
  
      if (!deletedArticle) {
        res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö" });
        return
      }
  
      res.status(200).json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (error) {
      console.error("‚ùå Error deleting article:", error);
      res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
    }
  };